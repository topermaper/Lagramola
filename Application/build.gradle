
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
    }
}

apply plugin: 'com.android.application'

repositories {
    jcenter()
}

dependencies {
    compile "com.android.support:support-v4:22.1.1"
    compile "com.android.support:gridlayout-v7:21.0.2"
    compile "com.android.support:cardview-v7:21.0.2"
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.google.android.gms:play-services:7.3.0'
    compile 'com.android.support:design:22.2.0'
}

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
    'main',     // main sample code; look here for the interesting stuff.
    'common',   // components that are reused by multiple samples
    'template'] // boilerplate code that is generated by the sample template process

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.marcosedo.lagramola"
        minSdkVersion 10
        targetSdkVersion 22
    }

    buildTypes {
        debug {
            //buildConfigField "String", "DOMAIN", "\"http://www.topian.comli.com/lagramola/\""
            buildConfigField "String", "DOMAIN", "\"http://192.168.0.101/lagramola/\""
        }
        release {
            buildConfigField "String", "DOMAIN", "\"http://www.topian.comli.com/lagramola/\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        user {
            applicationId "com.marcosedo.lagramola.user"
            buildConfigField "boolean", "SUPERAPP", "false"
        }
        admin {
            applicationId "com.marcosedo.lagramola.admin"
            buildConfigField "boolean", "SUPERAPP", "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }



    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                res.srcDirs "src/${dir}/res"
            }
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']

    }

}















